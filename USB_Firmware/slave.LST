C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SLAVE
OBJECT MODULE PLACED IN slave.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE slave.c OPTIMIZE(6,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #pragma NOIV                    // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:      slave.c
   4          //   Contents:  Hooks required to implement USB peripheral function.
   5          //              Code written for FX2 REVE 56-pin and above.
   6          //              This firmware is used to demonstrate FX2 Slave FIF
   7          //              operation.
   8          //   Copyright (c) 2003 Cypress Semiconductor All rights reserved
   9          //-----------------------------------------------------------------------------
  10          #include "fx2.h"
  11          #include "fx2regs.h"
  12          #include "fx2sdly.h"            // SYNCDELAY macro
  13          
  14          #define LED_ALL         (bmBIT0 | bmBIT1 | bmBIT2 | bmBIT3)
  15          
  16          extern BOOL GotSUD;             // Received setup data flag
  17          extern BOOL Sleep;
  18          extern BOOL Rwuen;
  19          extern BOOL Selfpwr;
  20          
  21          BYTE Configuration;             // Current configuration
  22          BYTE AlternateSetting;          // Alternate settings
  23          
  24          // EZUSB FX2 PORTA = slave fifo enable(s), when IFCFG[1:0]=11
  25          //sbit PA0 = IOA ^ 0;             // alt. func., INT0#
  26          //sbit PA1 = IOA ^ 1;             // alt. func., INT1#
  27          // sbit PA2 = IOA ^ 2;          // is SLOE
  28          //sbit PA3 = IOA ^ 3;             // alt. func., WU2
  29          // sbit PA4 = IOA ^ 4;          // is FIFOADR0
  30          // sbit PA5 = IOA ^ 5;          // is FIFOADR1
  31          // sbit PA6 = IOA ^ 6;          // is PKTEND
  32          // sbit PA7 = IOA ^ 7;          // is FLAGD
  33          
  34          // EZUSB FX2 PORTC i/o...       port NA for 56-pin FX2
  35          // sbit PC0 = IOC ^ 0;
  36          // sbit PC1 = IOC ^ 1;
  37          // sbit PC2 = IOC ^ 2;
  38          // sbit PC3 = IOC ^ 3;
  39          // sbit PC4 = IOC ^ 4;
  40          // sbit PC5 = IOC ^ 5;
  41          // sbit PC6 = IOC ^ 6;
  42          // sbit PC7 = IOC ^ 7;
  43          
  44          // EZUSB FX2 PORTB = FD[7:0], when IFCFG[1:0]=11
  45          // sbit PB0 = IOB ^ 0;
  46          // sbit PB1 = IOB ^ 1;
  47          // sbit PB2 = IOB ^ 2;
  48          // sbit PB3 = IOB ^ 3;
  49          // sbit PB4 = IOB ^ 4;
  50          // sbit PB5 = IOB ^ 5;
  51          // sbit PB6 = IOB ^ 6;
  52          // sbit PB7 = IOB ^ 7;
  53          
  54          // EZUSB FX2 PORTD = FD[15:8], when IFCFG[1:0]=11 and WORDWIDE=1
  55          //sbit PD0 = IOD ^ 0;
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 2   

  56          //sbit PD1 = IOD ^ 1;
  57          //sbit PD2 = IOD ^ 2;
  58          //sbit PD3 = IOD ^ 3;
  59          //sbit PD4 = IOD ^ 4;
  60          //sbit PD5 = IOD ^ 5;
  61          //sbit PD6 = IOD ^ 6;
  62          //sbit PD7 = IOD ^ 7;
  63          
  64          // EZUSB FX2 PORTE is not bit-addressable...
  65          
  66          //-----------------------------------------------------------------------------
  67          // Task Dispatcher hooks
  68          // The following hooks are called by the task dispatcher.
  69          //-----------------------------------------------------------------------------
  70          //void LED_Off (BYTE LED_Mask);
  71          //void LED_On (BYTE LED_Mask);
  72          
  73          //-----------------------------------------------------------------------------
  74          // Task Dispatcher hooks
  75          //   The following hooks are called by the task dispatcher.
  76          //-----------------------------------------------------------------------------
  77          void TD_Init( void )
  78          { // Called once at startup
  79   1      
  80   1      
  81   1        CPUCS = 0x10; // CLKSPD[1:0]=10, for 48MHz operation, output CLKOUT
  82   1      
  83   1        PINFLAGSAB = 0x4A;                    // FLAGB - EP2PF ,FLAGA - EP6EF
  84   1        SYNCDELAY;
  85   1        PINFLAGSCD = 0x08;                    // FLAGC - EP2EF
  86   1        SYNCDELAY;
  87   1        PORTACFG |= 0x80;
  88   1        SYNCDELAY;
  89   1        IFCONFIG = 0x03; // for async? for sync?
  90   1        SYNCDELAY;
  91   1        FIFOPINPOLAR |= 0x3F;
  92   1        SYNCDELAY;
  93   1      
  94   1        CPUCS |= 0x02;
  95   1              SYNCDELAY;  
  96   1              
  97   1              REVCTL = 0x01;
  98   1              SYNCDELAY;  
  99   1      
 100   1        // IFCLKSRC=1   , FIFOs executes on internal clk source 
 101   1        // xMHz=1       , 48MHz operation
 102   1        // IFCLKOE=1    ,Drive IFCLK pin signal at 48MHz
 103   1        // IFCLKPOL=0   , Don't invert IFCLK pin signal from internal clk
 104   1        // ASYNC=0      , master samples synchronous
 105   1        // GSTATE=0     , Don't drive GPIF states out on PORTE[2:0], debug WF
 106   1        // IFCFG[1:0]=11, FX2 in slave FIFO mode
 107   1      
 108   1      
 109   1        // Registers which require a synchronization delay, see section 15.14
 110   1        // FIFORESET        FIFOPINPOLAR
 111   1        // INPKTEND         OUTPKTEND
 112   1        // EPxBCH:L         REVCTL
 113   1        // GPIFTCB3         GPIFTCB2
 114   1        // GPIFTCB1         GPIFTCB0
 115   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
 116   1        // EPxFIFOCFG       EPxGPIFFLGSEL
 117   1        // PINFLAGSxx       EPxFIFOIRQ
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 3   

 118   1        // EPxFIFOIE        GPIFIRQ
 119   1        // GPIFIE           GPIFADRH:L
 120   1        // UDMACRCH:L       EPxGPIFTRIG
 121   1        // GPIFTRIG
 122   1        
 123   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
 124   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
 125   1      
 126   1      
 127   1        
 128   1       
 129   1      
 130   1        // EP4 and EP8 are not used in this implementation...
 131   1             
 132   1              EP4CFG = 0x01;                //clear valid bit
 133   1        SYNCDELAY;                     
 134   1        EP8CFG = 0x01;                //clear valid bit
 135   1        SYNCDELAY;   
 136   1        EP2CFG = 0xA0;                //out 512 bytes, 4x, bulk
 137   1        SYNCDELAY;                    
 138   1        EP6CFG = 0xE0;                // in 512 bytes, 4x, bulk
 139   1        SYNCDELAY;              
 140   1      
 141   1        FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 142   1        SYNCDELAY;                    // see TRM section 15.14
 143   1        FIFORESET = 0x02;             // reset, FIFO 2
 144   1        SYNCDELAY;                    // 
 145   1        FIFORESET = 0x04;             // reset, FIFO 4
 146   1        SYNCDELAY;                    // 
 147   1        FIFORESET = 0x06;             // reset, FIFO 6
 148   1        SYNCDELAY;                    // 
 149   1        FIFORESET = 0x08;             // reset, FIFO 8
 150   1        SYNCDELAY;                    // 
 151   1        FIFORESET = 0x00;             // deactivate NAK-ALL
 152   1        SYNCDELAY;   
 153   1              
 154   1              EP2FIFOCFG = 0x00;            
 155   1        SYNCDELAY;
 156   1        EP2FIFOCFG = 0x10;            // AUTOOUT=1, WORDWIDE=0
 157   1        SYNCDELAY;
 158   1              
 159   1              EP6FIFOCFG = 0x00;            
 160   1        SYNCDELAY;
 161   1        EP6FIFOCFG = 0x08;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=0
 162   1        SYNCDELAY;
 163   1              
 164   1              EP6AUTOINLENH = 0x02;
 165   1              SYNCDELAY;
 166   1              EP6AUTOINLENL = 0x00;
 167   1              SYNCDELAY;
 168   1              EP2FIFOPFH = 0x88;
 169   1              SYNCDELAY;
 170   1              EP2FIFOPFL = 0x00;
 171   1              SYNCDELAY;
 172   1              
 173   1              INPKTEND = 0x84;
 174   1              SYNCDELAY;
 175   1              INPKTEND = 0x84;
 176   1              SYNCDELAY;
 177   1              INPKTEND = 0x84;
 178   1              SYNCDELAY;
 179   1              INPKTEND = 0x84;
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 4   

 180   1              SYNCDELAY;
 181   1      
 182   1      }
 183          
 184          void TD_Poll( void )
 185          { // Called repeatedly while the device is idle
 186   1      
 187   1      }
 188          
 189          BOOL TD_Suspend( void )          
 190          { // Called before the device goes into suspend mode
 191   1         return( TRUE );
 192   1      }
 193          
 194          BOOL TD_Resume( void )          
 195          { // Called after the device resumes
 196   1         return( TRUE );
 197   1      }
 198          
 199          //-----------------------------------------------------------------------------
 200          // Device Request hooks
 201          //   The following hooks are called by the end point 0 device request parser.
 202          //-----------------------------------------------------------------------------
 203          BOOL DR_GetDescriptor( void )
 204          {
 205   1         return( TRUE );
 206   1      }
 207          
 208          BOOL DR_SetConfiguration( void )   
 209          { // Called when a Set Configuration command is received
 210   1        
 211   1        if( EZUSB_HIGHSPEED( ) )
 212   1        { // ...FX2 in high speed mode
 213   2          EP6AUTOINLENH = 0x02;
 214   2          SYNCDELAY;
 215   2          EP8AUTOINLENH = 0x02;   // set core AUTO commit len = 512 bytes
 216   2          SYNCDELAY;
 217   2          EP6AUTOINLENL = 0x00;
 218   2          SYNCDELAY;
 219   2          EP8AUTOINLENL = 0x00;
 220   2        }
 221   1        else
 222   1        { // ...FX2 in full speed mode
 223   2          EP6AUTOINLENH = 0x00;
 224   2          SYNCDELAY;
 225   2          EP8AUTOINLENH = 0x00;   // set core AUTO commit len = 64 bytes
 226   2          SYNCDELAY;
 227   2          EP6AUTOINLENL = 0x40;
 228   2          SYNCDELAY;
 229   2          EP8AUTOINLENL = 0x40;
 230   2        }
 231   1            
 232   1        Configuration = SETUPDAT[ 2 ];
 233   1        return( TRUE );        // Handled by user code
 234   1      }
 235          
 236          BOOL DR_GetConfiguration( void )   
 237          { // Called when a Get Configuration command is received
 238   1         EP0BUF[ 0 ] = Configuration;
 239   1         EP0BCH = 0;
 240   1         EP0BCL = 1;
 241   1         return(TRUE);          // Handled by user code
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 5   

 242   1      }
 243          
 244          BOOL DR_SetInterface( void )       
 245          { // Called when a Set Interface command is received
 246   1         AlternateSetting = SETUPDAT[ 2 ];
 247   1         return( TRUE );        // Handled by user code
 248   1      }
 249          
 250          BOOL DR_GetInterface( void )       
 251          { // Called when a Set Interface command is received
 252   1         EP0BUF[ 0 ] = AlternateSetting;
 253   1         EP0BCH = 0;
 254   1         EP0BCL = 1;
 255   1         return( TRUE );        // Handled by user code
 256   1      }
 257          
 258          BOOL DR_GetStatus( void )
 259          {
 260   1         return( TRUE );
 261   1      }
 262          
 263          BOOL DR_ClearFeature( void )
 264          {
 265   1         return( TRUE );
 266   1      }
 267          
 268          BOOL DR_SetFeature( void )
 269          {
 270   1         return( TRUE );
 271   1      }
 272          
 273          BOOL DR_VendorCmnd( void )
 274          {
 275   1        return( TRUE );
 276   1      }
 277          
 278          BOOL RstAll(void)
 279          {
 280   1              FIFORESET = 0x80; 
 281   1              SYNCDELAY;
 282   1              FIFORESET = 0X02;
 283   1              SYNCDELAY;
 284   1              FIFORESET = 0x06;
 285   1              SYNCDELAY;
 286   1              FIFORESET = 0x00;                
 287   1              SYNCDELAY;   
 288   1              EP2FIFOCFG = 0x00;            
 289   1              SYNCDELAY;
 290   1              EP2FIFOCFG = 0x10;  //8bits          
 291   1              SYNCDELAY;
 292   1              EP6FIFOCFG = 0x00;            
 293   1              SYNCDELAY;
 294   1              EP6FIFOCFG = 0x08;  //8bits               
 295   1              SYNCDELAY;
 296   1              EP6AUTOINLENH = 0x02;
 297   1              SYNCDELAY;
 298   1              EP6AUTOINLENL = 0x00;
 299   1              SYNCDELAY;
 300   1              INPKTEND = 0x84;
 301   1              SYNCDELAY;
 302   1              INPKTEND = 0x84;
 303   1              SYNCDELAY;
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 6   

 304   1              INPKTEND = 0x84;
 305   1              SYNCDELAY;
 306   1              INPKTEND = 0x84;
 307   1              SYNCDELAY;
 308   1                      
 309   1              return( TRUE );
 310   1      }       
 311          
 312          BOOL GetState(void)
 313          {
 314   1              EP0BUF[0]=EP2CS;
 315   1              EP0BUF[1]=EP2FIFOFLGS;
 316   1              EP0BUF[2]=EP2CFG;
 317   1              EP0BUF[3]=EP2FIFOCFG;
 318   1              EP0BUF[4]=EP2FIFOBCH;
 319   1              EP0BUF[5]=EP2FIFOBCL;
 320   1              EP0BUF[6]=EP2BCH;
 321   1              EP0BUF[7]=EP2BCL;
 322   1              
 323   1              EP0BUF[8]=EP6CS;
 324   1              EP0BUF[9]=EP2FIFOFLGS;
 325   1              EP0BUF[10]=EP6CFG;
 326   1              EP0BUF[11]=EP6FIFOCFG;
 327   1              EP0BUF[12]=EP6FIFOBCH;
 328   1              EP0BUF[13]=EP6FIFOBCL;
 329   1              EP0BUF[14]=EP6BCH;
 330   1              EP0BUF[15]=EP6BCL;
 331   1              
 332   1              EP0BUF[16]=EP2FIFOBUF[0];
 333   1              EP0BUF[17]=EP2FIFOBUF[1];
 334   1              EP0BUF[18]=EP6FIFOBUF[0];
 335   1              EP0BUF[19]=EP6FIFOBUF[1];
 336   1              EP0BUF[20]=EP6FIFOBUF[1022];
 337   1              EP0BUF[21]=EP6FIFOBUF[1023];
 338   1              EP0BUF[22]=EP6FIFOBUF[1024];
 339   1              EP0BUF[23]=EP6FIFOBUF[1025];
 340   1              EP0BUF[24]=EP6FIFOBUF[2046];
 341   1              EP0BUF[25]=EP6FIFOBUF[2047];
 342   1              EP0BCH=0x00;
 343   1              EP0BCL=0x1A;
 344   1              
 345   1              return( TRUE );
 346   1      }
 347          
 348          //-----------------------------------------------------------------------------
 349          // USB Interrupt Handlers
 350          //   The following functions are called by the USB interrupt jump table.
 351          //-----------------------------------------------------------------------------
 352          
 353          // Setup Data Available Interrupt Handler
 354          void ISR_Sudav( void ) interrupt 0
 355          {
 356   1         GotSUD = TRUE;         // Set flag
 357   1         EZUSB_IRQ_CLEAR( );
 358   1         USBIRQ = bmSUDAV;      // Clear SUDAV IRQ
 359   1      }
 360          
 361          // Setup Token Interrupt Handler
 362          void ISR_Sutok( void ) interrupt 0
 363          {
 364   1         EZUSB_IRQ_CLEAR( );
 365   1         USBIRQ = bmSUTOK;      // Clear SUTOK IRQ
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 7   

 366   1      }
 367          
 368          void ISR_Sof( void ) interrupt 0
 369          {
 370   1         EZUSB_IRQ_CLEAR( );
 371   1         USBIRQ = bmSOF;        // Clear SOF IRQ
 372   1      }
 373          
 374          void ISR_Ures( void ) interrupt 0
 375          {
 376   1         if ( EZUSB_HIGHSPEED( ) )
 377   1         {
 378   2            pConfigDscr = pHighSpeedConfigDscr;
 379   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 380   2         }
 381   1         else
 382   1         {
 383   2            pConfigDscr = pFullSpeedConfigDscr;
 384   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 385   2         }
 386   1         
 387   1         EZUSB_IRQ_CLEAR( );
 388   1         USBIRQ = bmURES;       // Clear URES IRQ
 389   1      }
 390          
 391          void ISR_Susp( void ) interrupt 0
 392          {
 393   1         Sleep = TRUE;
 394   1         EZUSB_IRQ_CLEAR( );
 395   1         USBIRQ = bmSUSP;
 396   1      }
 397          
 398          void ISR_Highspeed( void ) interrupt 0
 399          {
 400   1         if ( EZUSB_HIGHSPEED( ) )
 401   1         {
 402   2            pConfigDscr = pHighSpeedConfigDscr;
 403   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 404   2         }
 405   1         else
 406   1         {
 407   2            pConfigDscr = pFullSpeedConfigDscr;
 408   2            pOtherConfigDscr = pHighSpeedConfigDscr;
 409   2         }
 410   1      
 411   1         EZUSB_IRQ_CLEAR( );
 412   1         USBIRQ = bmHSGRANT;
 413   1      }
 414          void ISR_Ep0ack( void ) interrupt 0
 415          {
 416   1      }
 417          void ISR_Stub( void ) interrupt 0
 418          {
 419   1      }
 420          void ISR_Ep0in( void ) interrupt 0
 421          {
 422   1      }
 423          void ISR_Ep0out( void ) interrupt 0
 424          {
 425   1      }
 426          void ISR_Ep1in( void ) interrupt 0
 427          {
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 8   

 428   1      }
 429          void ISR_Ep1out( void ) interrupt 0
 430          {
 431   1      }
 432          void ISR_Ep2inout( void ) interrupt 0
 433          {
 434   1      }
 435          void ISR_Ep4inout( void ) interrupt 0
 436          {
 437   1      }
 438          void ISR_Ep6inout( void ) interrupt 0
 439          {
 440   1      }
 441          void ISR_Ep8inout( void ) interrupt 0
 442          {
 443   1      }
 444          void ISR_Ibn( void ) interrupt 0
 445          {
 446   1      }
 447          void ISR_Ep0pingnak( void ) interrupt 0
 448          {
 449   1      }
 450          void ISR_Ep1pingnak( void ) interrupt 0
 451          {
 452   1      }
 453          void ISR_Ep2pingnak( void ) interrupt 0
 454          {
 455   1      }
 456          void ISR_Ep4pingnak( void ) interrupt 0
 457          {
 458   1      }
 459          void ISR_Ep6pingnak( void ) interrupt 0
 460          {
 461   1      }
 462          void ISR_Ep8pingnak( void ) interrupt 0
 463          {
 464   1      }
 465          void ISR_Errorlimit( void ) interrupt 0
 466          {
 467   1      }
 468          void ISR_Ep2piderror( void ) interrupt 0
 469          {
 470   1      }
 471          void ISR_Ep4piderror( void ) interrupt 0
 472          {
 473   1      }
 474          void ISR_Ep6piderror( void ) interrupt 0
 475          {
 476   1      }
 477          void ISR_Ep8piderror( void ) interrupt 0
 478          {
 479   1      }
 480          void ISR_Ep2pflag( void ) interrupt 0
 481          {
 482   1      }
 483          void ISR_Ep4pflag( void ) interrupt 0
 484          {
 485   1      }
 486          void ISR_Ep6pflag( void ) interrupt 0
 487          {
 488   1      }
 489          void ISR_Ep8pflag( void ) interrupt 0
C51 COMPILER V9.00   SLAVE                                                                 10/12/2014 16:12:51 PAGE 9   

 490          {
 491   1      }
 492          void ISR_Ep2eflag( void ) interrupt 0
 493          {
 494   1      }
 495          void ISR_Ep4eflag( void ) interrupt 0
 496          {
 497   1      }
 498          void ISR_Ep6eflag( void ) interrupt 0
 499          {
 500   1      }
 501          void ISR_Ep8eflag( void ) interrupt 0
 502          {
 503   1      }
 504          void ISR_Ep2fflag( void ) interrupt 0
 505          {
 506   1      }
 507          void ISR_Ep4fflag( void ) interrupt 0
 508          {
 509   1      }
 510          void ISR_Ep6fflag( void ) interrupt 0
 511          {
 512   1      }
 513          void ISR_Ep8fflag( void ) interrupt 0
 514          {
 515   1      }
 516          void ISR_GpifComplete( void ) interrupt 0
 517          {
 518   1      }
 519          void ISR_GpifWaveform( void ) interrupt 0
 520          {
 521   1      }
 522          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    909    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
